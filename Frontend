<!DOCTYPE html><html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SuiSense AI</title>
  <style>
    body {
      background: #0e0e10;
      color: #f2f2f2;
      font-family: 'Inter', sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
      text-align: center;
      overflow: hidden;
    }
    h1 {
      font-size: 3rem;
      background: linear-gradient(90deg, #00ffe1, #7f00ff);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      margin-bottom: 10px;
      z-index: 1;
    }
    p {
      font-size: 1.2rem;
      color: #ccc;
      max-width: 600px;
      margin-bottom: 30px;
      z-index: 1;
    }
    .buttons {
      display: flex;
      gap: 20px;
      flex-wrap: wrap;
      justify-content: center;
      z-index: 1;
    }
    a {
      background-color: #7f00ff;
      color: #fff;
      padding: 12px 24px;
      border-radius: 8px;
      text-decoration: none;
      font-weight: bold;
      transition: background 0.3s;
    }
    a:hover {
      background-color: #5a00b8;
    }
    #particles {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      z-index: 0;
    }
  </style>
</head>
<body>
  <canvas id="particles"></canvas>  <h1>SuiSense AI</h1>
  <p>AI-powered on-chain intelligence for smart contract automation, risk analysis, and dynamic NFT metadata on the Sui Network.</p>
  <div class="buttons">
    <a href="https://github.com/Mitsu091485/SuiSense-AI" target="_blank">GitHub Repo</a>
    <a href="https://x.com/SuiSenseAI" target="_blank">Follow on X</a>
  </div>  <script>
    const canvas = document.getElementById('particles');
    const ctx = canvas.getContext('2d');

    let particlesArray;

    const colors = ['#00ffe1', '#7f00ff', '#00bfff'];

    const maxSize = 2;
    const minSize = 0.5;
    const numberOfParticles = 150;

    let mouse = {
      x: null,
      y: null
    };

    window.addEventListener('mousemove', function(event){
      mouse.x = event.x;
      mouse.y = event.y;
    });

    function Particle(x, y, directionX, directionY, size, color){
      this.x = x;
      this.y = y;
      this.directionX = directionX;
      this.directionY = directionY;
      this.size = size;
      this.color = color;
    }

    Particle.prototype.draw = function(){
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);
      ctx.fillStyle = this.color;
      ctx.fill();
    }

    Particle.prototype.update = function(){
      if(this.x + this.size > canvas.width || this.x - this.size < 0){
        this.directionX = -this.directionX;
      }
      if(this.y + this.size > canvas.height || this.y - this.size < 0){
        this.directionY = -this.directionY;
      }

      this.x += this.directionX;
      this.y += this.directionY;

      this.draw();
    }

    function init(){
      particlesArray = [];
      for (let i = 0; i < numberOfParticles; i++){
        let size = (Math.random() * (maxSize - minSize)) + minSize;
        let x = Math.random() * (innerWidth - size * 2);
        let y = Math.random() * (innerHeight - size * 2);
        let directionX = (Math.random() * 0.5) - 0.25;
        let directionY = (Math.random() * 0.5) - 0.25;
        let color = colors[Math.floor(Math.random() * colors.length)];

        particlesArray.push(new Particle(x, y, directionX, directionY, size, color));
      }
    }

    function animate(){
      requestAnimationFrame(animate);
      ctx.clearRect(0,0,innerWidth, innerHeight);

      for (let i = 0; i < particlesArray.length; i++){
        particlesArray[i].update();
      }
    }

    window.addEventListener('resize',
      function(){
        canvas.width = innerWidth;
        canvas.height = innerHeight;
        init();
      }
    );

    canvas.width = innerWidth;
    canvas.height = innerHeight;
    init();
    animate();
  </script></body>
</html>
